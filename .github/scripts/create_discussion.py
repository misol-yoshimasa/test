#!/usr/bin/env python3
"""
Create GitHub Discussion from parsed release notes
"""

import json
import subprocess
import time
import sys

def run_gh_command(args):
    """Run gh CLI command and return output"""
    result = subprocess.run(
        ['gh'] + args,
        capture_output=True,
        text=True,
        check=False
    )
    if result.returncode != 0:
        print(f'Error: {result.stderr}')
        return None
    return result.stdout

# Load parsed release notes
with open('release_notes.json') as f:
    data = json.load(f)

version = data['version']
features = data['features']

# Create discussion title and body
discussion_title = f'Netskope Release {version} - New Features and Enhancements'

# Create main discussion body (simplified without category list)
discussion_body = f'# Netskope Release {version} - New Features and Enhancements\n\n'
discussion_body += 'This discussion contains all the new features and enhancements '
discussion_body += f'from Netskope Release {version}.\n\n'
discussion_body += 'Each feature is posted as a separate comment below for easy reference and discussion.\n\n'
discussion_body += f'**Total Features:** {len(features)}\n\n'

# Count features by category for summary
categories_count = {}
for feature in features:
    cat = feature['category']
    categories_count[cat] = categories_count.get(cat, 0) + 1

discussion_body += '**Categories:**\n'
for cat, count in sorted(categories_count.items()):
    discussion_body += f'- {cat}: {count} feature{"s" if count > 1 else ""}\n'

discussion_body += '\n---\n'
discussion_body += f'*Source: [Release Notes](https://docs.netskope.com/en/new-features-and-enhancements-in-release-{version.replace(".", "-")})*\n'
discussion_body += f'*Generated by GitHub Actions on {time.strftime("%Y-%m-%d %H:%M:%S UTC")}*'

# Get repository info
import os
repository = os.environ.get('GITHUB_REPOSITORY', 'misol-yoshimasa/test')

# Get repository ID for GraphQL
repo_info = run_gh_command(['api', f'repos/{repository}', '--jq', '.node_id'])
if not repo_info:
    print('Failed to get repository info')
    sys.exit(1)
repo_id = repo_info.strip()

# Get Announcements category ID from existing discussion
category_info = run_gh_command([
    'api', f'repos/{repository}/discussions/1',
    '--jq', '.category.node_id'
])

if not category_info:
    # Fallback to hardcoded Announcements category ID
    print('Warning: Could not get category ID from existing discussion, using hardcoded ID')
    category_id = 'DIC_kwDOPev2ls4CuOwS'  # Announcements category ID for this repo
else:
    category_id = category_info.strip()
    print(f'Using category ID: {category_id}')

# Create the main discussion using GraphQL
print(f'Creating discussion: {discussion_title}')

# Write GraphQL mutation to file
mutation = '''
mutation($repositoryId: ID!, $categoryId: ID!, $title: String!, $body: String!) {
  createDiscussion(input: {
    repositoryId: $repositoryId
    categoryId: $categoryId
    title: $title
    body: $body
  }) {
    discussion {
      id
      number
      url
    }
  }
}
'''

# Execute GraphQL mutation with variables
result = subprocess.run(
    ['gh', 'api', 'graphql', 
     '-f', f'query={mutation}',
     '-f', f'repositoryId={repo_id}',
     '-f', f'categoryId={category_id}',
     '-f', f'title={discussion_title}',
     '-f', f'body={discussion_body}'],
    capture_output=True,
    text=True
)

if result.returncode != 0:
    print(f'Failed to create discussion: {result.stderr}')
    sys.exit(1)

response = json.loads(result.stdout)
if 'errors' in response:
    print(f'GraphQL errors: {response["errors"]}')
    sys.exit(1)

discussion_data = response['data']['createDiscussion']['discussion']
discussion_id = discussion_data['id']
discussion_number = discussion_data['number']
discussion_url = discussion_data['url']

print(f'âœ… Discussion created: #{discussion_number}')
print(f'   URL: {discussion_url}')

# Add comments for each feature
print(f'\nAdding {len(features)} feature comments...')

comment_mutation = '''
mutation($discussionId: ID!, $body: String!) {
  addDiscussionComment(input: {
    discussionId: $discussionId
    body: $body
  }) {
    comment {
      id
      url
    }
  }
}
'''

for i, feature in enumerate(features, 1):
    # Create comment body without category in title
    comment_body = f'## {feature["title"]}\n\n'
    comment_body += feature['description']
    comment_body += f'\n\n---\n*Category: {feature["category"]}*'
    
    # Add comment using inline variables
    result = subprocess.run(
        ['gh', 'api', 'graphql',
         '-f', f'query={comment_mutation}',
         '-f', f'discussionId={discussion_id}',
         '-f', f'body={comment_body}'],
        capture_output=True,
        text=True
    )
    
    if result.returncode == 0:
        print(f'  [{i}/{len(features)}] Added: {feature["title"][:50]}...')
    else:
        print(f'  [{i}/{len(features)}] Failed: {feature["title"][:50]}...')
        print(f'    Error: {result.stderr}')
    
    # Small delay to avoid rate limiting
    time.sleep(0.5)

print(f'\nðŸŽ‰ Successfully created discussion with {len(features)} feature comments!')
print(f'View at: {discussion_url}')