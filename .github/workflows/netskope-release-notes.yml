name: Netskope Release Notes to Discussions

on:
  workflow_dispatch:
    inputs:
      release_url:
        description: 'Netskope Release Notes URL'
        required: true
        default: 'https://docs.netskope.com/en/new-features-and-enhancements-in-release-129-0-0'
      dry_run:
        description: 'Dry run (parse only, do not create discussion)'
        required: false
        type: boolean
        default: false

jobs:
  create-release-discussion:
    runs-on: ubuntu-latest
    permissions:
      discussions: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.github/scripts/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/scripts/requirements.txt
          playwright install chromium
      
      - name: Parse Release Notes
        id: parse
        run: |
          echo "üìã Parsing release notes from: ${{ github.event.inputs.release_url }}"
          
          # Run parser with Playwright and save output
          python .github/scripts/parse_release_notes_playwright.py "${{ github.event.inputs.release_url }}" > release_notes.json
          
          # Display summary
          echo "‚úÖ Parsing complete. Found features:"
          python -c "
          import json
          with open('release_notes.json') as f:
              data = json.load(f)
              print(f\"Version: {data['version']}\")
              print(f\"Total features: {len(data['features'])}\")
              
              # Group by category
              categories = {}
              for feature in data['features']:
                  cat = feature['category']
                  if cat not in categories:
                      categories[cat] = 0
                  categories[cat] += 1
              
              for cat, count in sorted(categories.items()):
                  print(f\"  - {cat}: {count} features\")
          "
          
          # Set outputs for next steps
          VERSION=$(python -c "import json; print(json.load(open('release_notes.json'))['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Translate to Japanese
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "üåê Translating features to Japanese using GPT-4o..."
          
          # Check if API key is set
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ö†Ô∏è Warning: OPENAI_API_KEY secret is not set"
            echo "Skipping translation. To enable translation, add your OpenAI API key as a secret."
          else
            # Translate features
            python .github/scripts/translate_with_openai.py release_notes.json > release_notes_translated.json
            
            # Replace original with translated version
            mv release_notes_translated.json release_notes.json
            
            echo "‚úÖ Translation complete"
          fi
      
      - name: Create Discussion and Comments
        if: ${{ github.event.inputs.dry_run == 'false' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "üöÄ Creating Discussion for Release ${{ steps.parse.outputs.version }}"
          
          # Run Python script to create discussion and comments
          python .github/scripts/create_discussion.py
      
      - name: Dry Run Summary
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          echo "üîç DRY RUN - No discussion was created"
          echo ""
          echo "Release notes parsed successfully. To create the discussion, run the workflow again with dry_run = false"
          echo ""
          echo "üìä Parsed content summary:"
          cat release_notes.json | python -m json.tool
      
      - name: Upload Release Notes Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-${{ steps.parse.outputs.version }}
          path: release_notes.json
          retention-days: 30